<?php

namespace Tests\Feature\Http\Controllers\Investor;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Investor\BranchManagerController
 */
class BranchManagerControllerTest extends TestCase
{
    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('branch::marketplace::create'));

        $response->assertOk();
        $response->assertViewIs('branchmanager.marketplace.create');
        $response->assertViewHas('statuses');
        $response->assertViewHas('action');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function dashboard_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('branch::dashboard'));

        $response->assertOk();
        $response->assertViewIs('branchmanager.index');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('branch::marketplace::delete', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('branch::marketplace::index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('branch::marketplace::edit', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('branchmanager.marketplace.create');
        $response->assertViewHas('statuses');
        $response->assertViewHas('action');
        $response->assertViewHas('marketplace');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('branch::marketplace::index'));

        $response->assertOk();
        $response->assertViewIs('branchmanager.marketplace.index');
        $response->assertViewHas('page_title');
        $response->assertViewHas('tableBuilder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function row_data_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('branch::marketplace::data'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('branch::marketplace::storeCreate'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('branch::marketplace::edit', ['id' => $marketplace->id]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('branch::marketplace::update', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('branch::marketplace::edit', ['id' => $marketplace->id]));

        // TODO: perform additional assertions
    }

    // test cases...
}
