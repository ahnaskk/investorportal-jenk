<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\InvestorController
 */
class InvestorControllerTest extends TestCase
{
    /**
     * @test
     */
    public function syndication_payments_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::syndication-payments'));

        $response->assertOk();
        $response->assertViewIs('admin.investors.syndication_payment');
        $response->assertViewHas('page_title');
        $response->assertViewHas('investorsList');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('recurrence_types');
        $response->assertViewHas('recurrence_type');
        $response->assertViewHas('paymentDate');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function syndication_payments_table_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::syndication-payments-tabledata'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function ach_credit_request_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::achCreditRequest', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.investor_ach_credit_request');
        $response->assertViewHas('page_title');
        $response->assertViewHas('Investor');
        $response->assertViewHas('BankDetails');
        $response->assertViewHas('amount');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function ach_request_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::achRequest', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.investor_ach_request');
        $response->assertViewHas('page_title');
        $response->assertViewHas('Investor');
        $response->assertViewHas('BankDetails');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function bank_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::bank', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.bank_details');
        $response->assertViewHas('page_title');
        $response->assertViewHas('bank_details');
        $response->assertViewHas('action');
        $response->assertViewHas('id');
        $response->assertViewHas('investor');
        $response->assertViewHas('masked_accountNo');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function bank_edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::bankCreate', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.bank_details');
        $response->assertViewHas('page_title');
        $response->assertViewHas('investor_id');
        $response->assertViewHas('action');
        $response->assertViewHas('investor');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function bank_details_list_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::bank_details', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.bank_details_list');
        $response->assertViewHas('page_title');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('id');
        $response->assertViewHas('investor');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function change_auto_syndicate_payment_status_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::syndication-payments-auto-status'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::create'));

        $response->assertOk();
        $response->assertViewIs('admin.investors.create');
        $response->assertViewHas('bank');
        $response->assertViewHas('page_title');
        $response->assertViewHas('investor_types');
        $response->assertViewHas('investor_admin');
        $response->assertViewHas('recurrence_types');
        $response->assertViewHas('action');
        $response->assertViewHas('groupBy');
        $response->assertViewHas('companies');
        $response->assertViewHas('company_permission');
        $response->assertViewHas('user_id');
        $response->assertViewHas('label');
        $response->assertViewHas('Roles');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function creditcard_payment_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->delete(route('admin::investors::creditcard_payment', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.investor_credit_card_payment');
        $response->assertViewHas('page_title');
        $response->assertViewHas('Investor');
        $response->assertViewHas('amount');
        $response->assertViewHas('stripe_key');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function ctd_for_all_investor_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::ctd-for-all-investors'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::delete', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(to('admin/investors/'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_bank_account_details_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::delete_bank_details', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::edit', ['id' => $id]));

        $response->assertRedirect(withErrors('This Investor not a company based!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_admin_bank_accounts_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::edit_bank_details', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.admins.bank_details');
        $response->assertViewHas('page_title');
        $response->assertViewHas('action');
        $response->assertViewHas('bank_details');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_admin_bankaccount_details_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::bankdata', ['id' => $id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::index'));

        $response->assertOk();
        $response->assertViewIs('admin.investors.index');
        $response->assertViewHas('page_title');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('investor_types');
        $response->assertViewHas('companies');
        $response->assertViewHas('recurrence_types');
        $response->assertViewHas('label');
        $response->assertViewHas('Roles');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investor_ach_check_edit_ajax_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investor_list_download_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::reports::investor-list-download'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investor_syndication_report_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::syndication-report', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.investors.syndication_report');
        $response->assertViewHas('data');
        $response->assertViewHas('invester_id');
        $response->assertViewHas('date_start');
        $response->assertViewHas('date_end');
        $response->assertViewHas('page_title');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investors_log_list_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::investorsLogList'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function liquidity_update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::liquidity_update', ['id' => $id]));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function portfolio_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::portfolio', ['id' => $id]));

        $response->assertRedirect(withErrors('This Investor not a company based'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function portfolio_download_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::portfolio-download'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function select_type_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::selectType'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function send_syndication_payment_single_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::syndication-payments-send-single'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function send_syndication_payments_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::syndication-payments-send'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::storeCreate'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withInput());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function transaction_report_download_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::transactionreportdownload'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function transactions_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::investors::transactionreport'));

        $response->assertOk();
        $response->assertViewIs('admin.investors.transaction_report');
        $response->assertViewHas('page_title');
        $response->assertViewHas('investors');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('categories');
        $response->assertViewHas('companies');
        $response->assertViewHas('investor_types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::update', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withInput());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_bank_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::investors::updateBank'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors($e->getMessage()));

        // TODO: perform additional assertions
    }

    // test cases...
}
