<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\NotesController
 */
class NotesControllerTest extends TestCase
{
    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::notes::create', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.notes.create');
        $response->assertViewHas('action');
        $response->assertViewHas('merchant_id');
        $response->assertViewHas('mNotes');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::notes::delete', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('admin::notes::lists', $id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::notes::edit', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.notes.create');
        $response->assertViewHas('mNotes');
        $response->assertViewHas('action');
        $response->assertViewHas('merchant_id');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::notes::lists', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.notes.index');
        $response->assertViewHas('page_title');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('merchant_id');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function row_data_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::notes::data', ['id' => $id]));

        $response->assertRedirect(withError($e->getMessage()));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::notes::storeCreate', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('admin::notes::update', ['id' => $merchant_id]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('admin::notes::update', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('admin::notes::update', ['id' => $merchant_id, 'nid' => $merchant_id]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_s_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('admin::notes::update_s', ['id' => $id]));

        $response->assertOk();
        $response->assertViewIs('admin.notes.create');
        $response->assertViewHas('mNotes');
        $response->assertViewHas('merchant_id');
        $response->assertViewHas('action');
        $response->assertViewHas('mNote');
        $response->assertViewHas('mnotes_count');
        $response->assertViewHas('merchant');

        // TODO: perform additional assertions
    }

    // test cases...
}
