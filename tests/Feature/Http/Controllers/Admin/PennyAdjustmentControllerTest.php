<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Admin\PennyAdjustmentController
 */
class PennyAdjustmentControllerTest extends TestCase
{
    /**
     * @test
     */
    public function company_amount_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::CompanyAmountDifference'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.CompanyAmountDifference');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('percentage');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function final_participant_share_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::FinalParticipantShare'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.FinalParticipantShare');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investment_amount_adjuster_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::InvestmentAmountAdjuster'));

        $response->assertRedirect(withSuccess('Successfully Removed'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function investment_amount_check_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::InvestmentAmountCheck'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.InvestmentAmountCheck');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function liquidity_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::LiquidityDifference'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.LiquidityDifference');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('users');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function merchant_investor_share_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::MerchantInvestorShareDifference'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.MerchantInvestorShareDifference');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function merchant_value_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::MerchantValueDifference'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.MerchantValueDifference');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function merchants_fund_amount_check_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::MerchantsFundAmountCheck'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.MerchantsFundAmountCheck');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');
        $response->assertViewHas('percentage');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function penny_investment_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::PennyInvestment'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.PennyInvestment');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');
        $response->assertViewHas('percentage');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function remove_penny_investment_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::RemovePennyInvestment'));

        $response->assertRedirect(withSuccess('Successfully Removed'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function remove_zero_participant_amount_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::RemoveZeroParticipantAmount'));

        $response->assertRedirect(withSuccess('Successfully Removed'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_investor_based_company_amount_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::UpdateInvestorBasedCompanyAmountDifference'));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_liquidity_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::UpdateLiquidityDifference'));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_merchant_based_company_amount_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::UpdateMerchantBasedCompanyAmountDifference'));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_merchant_investor_share_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::UpdateMerchantInvestorShareDifference'));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_merchant_value_r_t_r_difference_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::UpdateMerchantValueRTRDifference'));

        $response->assertRedirect(withSuccess('Successfully Updated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function zero_participant_amount_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('PennyAdjustment::ZeroParticipantAmount'));

        $response->assertOk();
        $response->assertViewIs('admin.PennyAdjustment.ZeroParticipantAmount');
        $response->assertViewHas('tableBuilder');
        $response->assertViewHas('page_title');
        $response->assertViewHas('merchants');
        $response->assertViewHas('page_description');

        // TODO: perform additional assertions
    }

    // test cases...
}
